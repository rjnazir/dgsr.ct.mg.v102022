<?php

namespace Proxies\__CG__\Ct\Service\MetierManagerBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class CtConstAvDedCarac extends \Ct\Service\MetierManagerBundle\Entity\CtConstAvDedCarac implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'id', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'cadCylindre', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'cadPuissance', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'cadPoidsVide', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'cadChargeUtile', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'cadPoidsTotalCharge', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'cadHauteur', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'cadLargeur', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'cadLongueur', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'cadNumSerieType', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'cadNumMoteur', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'cadPremiereCircule', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'cadTypeCar', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'cadNbrAssis', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'cadPoidsMaxima', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'ctCarosserie', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'ctConstAvDedType', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'ctGenre', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'ctMarque', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'ctSourceEnergie'];
        }

        return ['__isInitialized__', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'id', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'cadCylindre', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'cadPuissance', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'cadPoidsVide', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'cadChargeUtile', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'cadPoidsTotalCharge', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'cadHauteur', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'cadLargeur', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'cadLongueur', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'cadNumSerieType', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'cadNumMoteur', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'cadPremiereCircule', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'cadTypeCar', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'cadNbrAssis', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'cadPoidsMaxima', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'ctCarosserie', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'ctConstAvDedType', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'ctGenre', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'ctMarque', '' . "\0" . 'Ct\\Service\\MetierManagerBundle\\Entity\\CtConstAvDedCarac' . "\0" . 'ctSourceEnergie'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (CtConstAvDedCarac $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setCadPuissance($cadPuissance)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCadPuissance', [$cadPuissance]);

        return parent::setCadPuissance($cadPuissance);
    }

    /**
     * {@inheritDoc}
     */
    public function getCadPuissance()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCadPuissance', []);

        return parent::getCadPuissance();
    }

    /**
     * {@inheritDoc}
     */
    public function setCadPoidsVide($cadPoidsVide)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCadPoidsVide', [$cadPoidsVide]);

        return parent::setCadPoidsVide($cadPoidsVide);
    }

    /**
     * {@inheritDoc}
     */
    public function getCadPoidsVide()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCadPoidsVide', []);

        return parent::getCadPoidsVide();
    }

    /**
     * {@inheritDoc}
     */
    public function setCadChargeUtile($cadChargeUtile)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCadChargeUtile', [$cadChargeUtile]);

        return parent::setCadChargeUtile($cadChargeUtile);
    }

    /**
     * {@inheritDoc}
     */
    public function getCadChargeUtile()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCadChargeUtile', []);

        return parent::getCadChargeUtile();
    }

    /**
     * {@inheritDoc}
     */
    public function setCadHauteur($cadHauteur)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCadHauteur', [$cadHauteur]);

        return parent::setCadHauteur($cadHauteur);
    }

    /**
     * {@inheritDoc}
     */
    public function getCadHauteur()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCadHauteur', []);

        return parent::getCadHauteur();
    }

    /**
     * {@inheritDoc}
     */
    public function setCadLargeur($cadLargeur)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCadLargeur', [$cadLargeur]);

        return parent::setCadLargeur($cadLargeur);
    }

    /**
     * {@inheritDoc}
     */
    public function getCadLargeur()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCadLargeur', []);

        return parent::getCadLargeur();
    }

    /**
     * {@inheritDoc}
     */
    public function setCadLongueur($cadLongueur)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCadLongueur', [$cadLongueur]);

        return parent::setCadLongueur($cadLongueur);
    }

    /**
     * {@inheritDoc}
     */
    public function getCadLongueur()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCadLongueur', []);

        return parent::getCadLongueur();
    }

    /**
     * {@inheritDoc}
     */
    public function setCadNumSerieType($cadNumSerieType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCadNumSerieType', [$cadNumSerieType]);

        return parent::setCadNumSerieType($cadNumSerieType);
    }

    /**
     * {@inheritDoc}
     */
    public function getCadNumSerieType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCadNumSerieType', []);

        return parent::getCadNumSerieType();
    }

    /**
     * {@inheritDoc}
     */
    public function setCadNumMoteur($cadNumMoteur)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCadNumMoteur', [$cadNumMoteur]);

        return parent::setCadNumMoteur($cadNumMoteur);
    }

    /**
     * {@inheritDoc}
     */
    public function getCadNumMoteur()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCadNumMoteur', []);

        return parent::getCadNumMoteur();
    }

    /**
     * {@inheritDoc}
     */
    public function setCadTypeCar($cadTypeCar)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCadTypeCar', [$cadTypeCar]);

        return parent::setCadTypeCar($cadTypeCar);
    }

    /**
     * {@inheritDoc}
     */
    public function getCadTypeCar()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCadTypeCar', []);

        return parent::getCadTypeCar();
    }

    /**
     * {@inheritDoc}
     */
    public function setCadPoidsMaxima($cadPoidsMaxima)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCadPoidsMaxima', [$cadPoidsMaxima]);

        return parent::setCadPoidsMaxima($cadPoidsMaxima);
    }

    /**
     * {@inheritDoc}
     */
    public function getCadPoidsMaxima()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCadPoidsMaxima', []);

        return parent::getCadPoidsMaxima();
    }

    /**
     * {@inheritDoc}
     */
    public function setCtCarosserie(\Ct\Service\MetierManagerBundle\Entity\CtCarosserie $ctCarosserie = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCtCarosserie', [$ctCarosserie]);

        return parent::setCtCarosserie($ctCarosserie);
    }

    /**
     * {@inheritDoc}
     */
    public function getCtCarosserie()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCtCarosserie', []);

        return parent::getCtCarosserie();
    }

    /**
     * {@inheritDoc}
     */
    public function setCtConstAvDedType(\Ct\Service\MetierManagerBundle\Entity\CtConstAvDedType $ctConstAvDedType = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCtConstAvDedType', [$ctConstAvDedType]);

        return parent::setCtConstAvDedType($ctConstAvDedType);
    }

    /**
     * {@inheritDoc}
     */
    public function getCtConstAvDedType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCtConstAvDedType', []);

        return parent::getCtConstAvDedType();
    }

    /**
     * {@inheritDoc}
     */
    public function setCtGenre(\Ct\Service\MetierManagerBundle\Entity\CtGenre $ctGenre = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCtGenre', [$ctGenre]);

        return parent::setCtGenre($ctGenre);
    }

    /**
     * {@inheritDoc}
     */
    public function getCtGenre()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCtGenre', []);

        return parent::getCtGenre();
    }

    /**
     * {@inheritDoc}
     */
    public function setCtMarque(\Ct\Service\MetierManagerBundle\Entity\CtMarque $ctMarque = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCtMarque', [$ctMarque]);

        return parent::setCtMarque($ctMarque);
    }

    /**
     * {@inheritDoc}
     */
    public function getCtMarque()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCtMarque', []);

        return parent::getCtMarque();
    }

    /**
     * {@inheritDoc}
     */
    public function setCtSourceEnergie(\Ct\Service\MetierManagerBundle\Entity\CtSourceEnergie $ctSourceEnergie = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCtSourceEnergie', [$ctSourceEnergie]);

        return parent::setCtSourceEnergie($ctSourceEnergie);
    }

    /**
     * {@inheritDoc}
     */
    public function getCtSourceEnergie()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCtSourceEnergie', []);

        return parent::getCtSourceEnergie();
    }

    /**
     * {@inheritDoc}
     */
    public function setCadPoidsTotalCharge($cadPoidsTotalCharge)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCadPoidsTotalCharge', [$cadPoidsTotalCharge]);

        return parent::setCadPoidsTotalCharge($cadPoidsTotalCharge);
    }

    /**
     * {@inheritDoc}
     */
    public function getCadPoidsTotalCharge()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCadPoidsTotalCharge', []);

        return parent::getCadPoidsTotalCharge();
    }

    /**
     * {@inheritDoc}
     */
    public function setCadPremiereCircule($cadPremiereCircule)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCadPremiereCircule', [$cadPremiereCircule]);

        return parent::setCadPremiereCircule($cadPremiereCircule);
    }

    /**
     * {@inheritDoc}
     */
    public function getCadPremiereCircule()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCadPremiereCircule', []);

        return parent::getCadPremiereCircule();
    }

    /**
     * {@inheritDoc}
     */
    public function setCadCylindre($cadCylindre)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCadCylindre', [$cadCylindre]);

        return parent::setCadCylindre($cadCylindre);
    }

    /**
     * {@inheritDoc}
     */
    public function getCadCylindre()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCadCylindre', []);

        return parent::getCadCylindre();
    }

    /**
     * {@inheritDoc}
     */
    public function setCadNbrAssis($cadNbrAssis)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCadNbrAssis', [$cadNbrAssis]);

        return parent::setCadNbrAssis($cadNbrAssis);
    }

    /**
     * {@inheritDoc}
     */
    public function getCadNbrAssis()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCadNbrAssis', []);

        return parent::getCadNbrAssis();
    }

}
